# ===== 1. ДЕКОРАТОР ЛОГИРОВАНИЯ =====

def logger(func):
    """
    Декоратор для логирования вызовов функций и их результатов
    """

    def wrapper(*args, **kwargs):
        # Выводим информацию перед вызовом функции
        print(f"Вызов функции {func.__name__} с аргументами {args} и {kwargs}")

        # Вызываем саму функцию и получаем результат
        result = func(*args, **kwargs)

        # Выводим информацию после выполнения функции
        print(f"Функция {func.__name__} вернула {result}")
        print("-" * 50)  # Разделитель для красоты

        return result

    return wrapper


# Применяем декоратор к функциям

@logger
def add(a, b):
    """Простая функция сложения двух чисел"""
    return a + b


@logger
def divide(a, b):
    """Функция деления с проверкой деления на ноль"""
    if b == 0:
        return "Ошибка: деление на ноль!"
    return a / b


@logger
def greet(name):
    """Функция приветствия"""
    return f"Привет, {name}!"


# Тестируем функции с декоратором логирования
print("=== ТЕСТИРОВАНИЕ ДЕКОРАТОРА ЛОГИРОВАНИЯ ===")
add(5, 3)
divide(10, 2)
divide(8, 0)
greet("Анна")


# ===== 2. ДЕКОРАТОР ДОСТУПА =====

def require_role(allowed_roles):
    """
    Декоратор для проверки роли пользователя
    allowed_roles - список разрешенных ролей
    """

    def decorator(func):
        def wrapper(user, *args, **kwargs):
            # Проверяем, есть ли роль пользователя в списке разрешенных
            if user.get('role') in allowed_roles:
                # Если роль разрешена - выполняем функцию
                return func(user, *args, **kwargs)
            else:
                # Если роль запрещена - выводим сообщение
                print(f"Доступ запрещён пользователю {user['name']}")
                return None

        return wrapper

    return decorator


# Создаем функции с проверкой доступа

@require_role(['admin'])
def delete_database(user):
    """Функция удаления базы данных (только для админов)"""
    print(f"База данных удалена пользователем {user['name']}")
    return "База данных успешно удалена"


@require_role(['admin', 'manager'])
def edit_settings(user):
    """Функция редактирования настроек (для админов и менеджеров)"""
    print(f"Настройки изменены пользователем {user['name']}")
    return "Настройки успешно изменены"


@require_role(['user', 'admin', 'manager'])
def view_data(user):
    """Функция просмотра данных (для всех пользователей)"""
    print(f"Данные просмотрены пользователем {user['name']}")
    return "Данные успешно просмотрены"


# Создаем тестовых пользователей с разными ролями
users = [
    {'name': 'Иван', 'role': 'admin'},
    {'name': 'Мария', 'role': 'manager'},
    {'name': 'Петр', 'role': 'user'},
    {'name': 'Ольга', 'role': 'guest'}
]

# Тестируем доступ для разных пользователей
print("\n=== ТЕСТИРОВАНИЕ ДЕКОРАТОРА ДОСТУПА ===")

for user in users:
    print(f"\nПроверка прав для пользователя: {user['name']} (роль: {user['role']})")

    # Пытаемся выполнить разные операции для каждого пользователя
    delete_database(user)
    edit_settings(user)
    view_data(user)
